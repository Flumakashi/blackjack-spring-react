package com.example.backend.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable()) // –æ—Ç–∫–ª—é—á–∞–µ–º CSRF
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/api/auth/register","/h2-console/**").permitAll() // —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ h2
                        .anyRequest().authenticated()
                )
                .headers(headers -> headers
                        .frameOptions(HeadersConfigurer.FrameOptionsConfig::disable) // üîÑ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±
                )
                .formLogin(Customizer.withDefaults()); // –≤–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
